package Tests;import Settings.CapabilitiesSettings;import io.appium.java_client.AppiumDriver;import org.testng.annotations.AfterMethod;import org.testng.annotations.AfterSuite;import org.testng.annotations.BeforeSuite;import pages.ScreenBase;import java.io.IOException;import static Utils.Helpers.readReadProperties;public class TestBase {	public static AppiumDriver driver;	public static AppiumDriver driver2;	public static ScreenBase scr;	@BeforeSuite	public void setUp() throws Exception {		scr = new ScreenBase();		driver = startDriver("GalaxyS7");		//driver2 = startDriver("GrandPrime");		//Helpers.init(driver2);		//scr.initialize();	}	@AfterMethod	public void afterEachTest(){		driver.resetApp();	}	@AfterSuite	public void tearDown() throws Exception {		System.out.println(".......Stopping Appium driver");		driver.quit();		//driver2.quit();		//AppiumServer.stopAppiumServer();	}	private AppiumDriver startDriver(String deviceName) throws Exception {		AppiumDriver driver = null;		//Properties device = readReadProperties("/src/test/resources/devices/" + deviceName + ".properties");		//AppiumServer.startAppiumServer(device.getProperty("main.port"), device.getProperty("bootstrap.port"), device.getProperty("device.id"));		return createDriver(driver, "4444");	}	private AppiumDriver createDriver(AppiumDriver driver, String port) throws IOException {		String platform = readReadProperties("/src/test/resources/properties/platform.properties").getProperty("platform");		System.out.println("Starting Appium driver.....");		if (driver == null) {			if (platform.equals("iOS")) {				CapabilitiesSettings.setIOSCapabilities();				driver = CapabilitiesSettings.createIOSDriver();			}			if (platform.equals("Android")) {				CapabilitiesSettings.setAndroidCapabilities();				driver = CapabilitiesSettings.createAndroidDriver(port);			}			if (platform.equals("AndroidWeb")) {				CapabilitiesSettings.setAndroidWEBCapabilities();				driver = CapabilitiesSettings.createAndroidDriver(port);			}		}		else {			driver.resetApp();		}		return driver;	}}